<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title> ATTETION SE CODE EST A UTILISER SANS MODERATION ( code INFO SUR LES CONDITION ) A MODIFIER POUR LECTURE  </title>
    </head>

    <body>
    	<h1>Les conditions</h1>
    	<h2>La structure de base : if… else</h2>
<?php 
/*1:Les symboles à connaître : 
il va d'abord falloir retenir quelques symboles qui permettent de faire des comparaisons.
 Soyez attentifs car ils vous seront utiles pour les conditions.

2:La structure if… else : 
c'est le gros morceau. Là vous allez voir comment fonctionne une condition avecif… else. 
Inutile de vous dire qu'il est indispensable de bien comprendre cela.

3:Des conditions multiples : 
on compliquera un peu nos conditions. Vous allez voir en effet qu'on peut utiliser 
plusieurs conditions à la fois.

4:Le cas des booléens : 
nous verrons ensuite qu'il existe une façon particulière d'utiliser les conditions quand 
on travaille sur des booléens. Si vous ne savez pas ce que sont les booléens, revoyez le 
chapitre sur les variables.

5:L'astuce bonus :
 parce qu'il y a toujours un bonus pour récompenser ceux qui ont bien suivi jusqu'au bout !*/

?>

<h3>Les symboles à connaître</h3>
<?php
Symbole       Signification

  ==          Est égal à

   >          Est supérieur à

   <          Est inférieur à

  >=            Est supérieur ou égal à

  <=            Est inférieur ou égal à

  !=            Est différent de




?>

<h3>La structure if… else</h3>

<?php
/*Pour introduire une condition, on utilise le motif, qui en anglais signifie « si ».

On ajoute à la suite entre parenthèses la condition en elle-même 
(vous allez voir que vous pouvez inventer une infinité de conditions).

Enfin, on ouvre des accolades à l'intérieur desquelles on placera les instructions à exécuter si la condition est remplie.*/



$age = 8;

if ($age <= 12)
{
    echo "Salut gamin !";
}
//Ici, on demande à PHP : si la variable$ageest inférieure ou égale à 12, affiche « Salut gamin ! ».
?>
    


<p>Voici un exemple un peut plus pousser </p>

<?php
$age = 8;
 
if ($age <= 12) // SI l'âge est inférieur ou égal à 12
{
    echo "Salut gamin ! Bienvenue sur mon site !<br />";
    $autorisation_entrer = "Oui";
}
else // SINON
{
    echo "Ceci est un site pour enfants, vous êtes trop vieux pour pouvoir  entrer. Au revoir !<br />";
    $autorisation_entrer = "Non";
}
 
echo "Avez-vous l'autorisation d'entrer ? La réponse est : $autorisation_entrer";


//Tout d'abord, j'ai mis plusieurs instructions entre accolades.

/*Ensuite, vous avez remarqué que j'ai ajouté le motelse(« sinon »).
 En clair, on demande : Si l'âge est inférieur ou égal à 12 ans,
  fais ceci, sinon fais cela.*/
?>

<p>Voici un exemple un peut plus pousser sur les condition .</p>*

<?php
$autorisation_entrer = "Oui";

if ($autorisation_entrer == "Oui") // SI on a l'autorisation d'entrer
{
    // instructions à exécuter quand on est autorisé à entrer
}
elseif ($autorisation_entrer == "Non") // SINON SI on n'a pas l'autorisation d'entrer
{
    // instructions à exécuter quand on n'est pas autorisé à entrer
}
else // SINON (la variable ne contient ni Oui ni Non, on ne peut pas agir)
{
    echo "Euh, je ne connais pas ton âge, tu peux me le rappeler s'il te plaît ?";
}


/*
La principale nouveauté ici, c'est le mot-cléelseifqui signifie « sinon si ». 
Dans l'ordre, PHP rencontre les conditions suivantes :

si$autorisation_entrerest égale à « Oui », tu exécutes ces instructions…

sinon si$autorisation_entrerest égale à « Non », tu exécutes ces autres instructions…

sinon, tu redemandes l'âge pour savoir si on a ou non l'autorisation d'entrer.

Au fait, au départ, une variable ne contient rien. Sa valeur est vide, on dit qu'elle vautNULL, 
c'est-à-dire rien du tout.
Pour vérifier si la variable est vide, vous pouvez taper :if ($variable == NULL)…

*/
?>



<h3>Le cas des booléens</h3>

<?php 
 /*
 Si vous regardez bien le dernier code source (avec$autorisation_entrer),
 vous ne trouvez pas qu'il serait plus adapté d'utiliser des booléens ?
 */


 /*
 Ce sont ces variables qui valent soittrue(vrai) soitfalse(faux).
 Eh bien, les booléens sont particulièrement utiles avec les conditions ! 
 Voici comment on teste une variable booléenne :
 */

<?php
$autorisation_entrer = true;

if ($autorisation_entrer == true)
{
    echo "Bienvenue petit nouveau. :o)";
}
elseif ($autorisation_entrer == false)
{
    echo "T'as pas le droit d'entrer !";
}
/* 
un des avantages des booléens, c'est qu'ils sont particulièrement adaptés aux conditions.
Pourquoi ? Parce qu'en fait vous n'êtes pas obligés d'ajouter le== true. Quand vous travaillez 
sur une variable booléenne, PHP comprend très bien ce que vous avez voulu dire :
*/

<?php
$autorisation_entrer = true;

if ($autorisation_entrer)
{
    echo "Bienvenue petit nouveau. :o)";
}
else
{
    echo "T'as pas le droit d'entrer !";
}
/*PHP comprend qu'il faut qu'il vérifie si$autorisation_entrervauttrue. Avantages :

c'est plus rapide à écrire pour vous ; ça se comprend bien mieux.

En effet, si vous « lisez » la première ligne, ça donne : « SI on a l'autorisation d'entrer… ».
C'est donc un raccourci à connaître quand on travaille sur des booléens.
*/


//Il y a un symbole qui permet de vérifier si la variable vautfalse : le point d'exclamation (!). On écrit :

<?php
$autorisation_entrer = true;

if (! $autorisation_entrer)
{

}
/*
C'est une autre façon de faire. Si vous préférez mettreif 
($autorisation_entrer == false)c'est tout aussi bien, mais 
la méthode « courte » est plus lisible.
*/
?>
?>
?>
?>
<h3>Des conditions multiples</h3>

<?php 
/*
Ce qu'on va essayer de faire, c'est de poser plusieurs conditions à la fois. 
Pour cela, on aura besoin de nouveaux mots-clés. Voici les principaux à connaître :
*/
Mot-clé      Signification       Symbole équivalent

 AND              Et                     && // la touche du 1 « Alt Gr » et « & »

 OR               Ou                     || //La touche du 6  « Alt Gr » et « 6 »



 //Voici un premier exemple :


 <?php
$age = 8;
$langue = "anglais";


if ($age <= 12 AND $langue == "français")
{
    echo "Bienvenue sur mon site !";
}
elseif ($age <= 12 AND $langue == "anglais")
{
    echo "Welcome to my website!";
}
/*
C'est tout simple en fait et ça se comprend très bien :
 si l'âge est inférieur ou égal à 12 ans et que le visiteur parle français,
 on lui affiche un message de bienvenue en français. Sinon, si le visiteur
  parle anglais, on affiche un message en anglais.

Bon allez, un dernier exemple avec OR pour que vous l'ayez vu au moins une fois, 
et on arrête là.
*/

<?php
$pays = "France";

if ($pays == "France" OR $pays == "Belgique")
{
    echo "Bienvenue sur notre site !";
}
else
{
    echo "Désolés, notre service n'est pas encore disponible dans votre pays !";
}
?>

?>
?>

<h3>L'astuce bonus</h3>
<p>Avec les conditions, il y a une astuce à connaître.
Sachez que les deux codes ci-dessous donnent exactement le même résultat :</p>

<?php
$variable = 23;

if ($variable == 23)
{
    echo '<strong>Bravo !</strong> Vous avez trouvé le nombre mystère !';
}
?>

<?php
$variable = 23;

if ($variable == 23)
{
?>
<strong>Bravo !</strong> Vous avez trouvé le nombre mystère !
<?php
}


/*
Comme vous le voyez, dans la seconde colonne on n'a pas utilisé deecho.
 En effet, il vous suffit d'ouvrir l'accolade ({), puis de fermer la balise PHP (?>),
  et vous pouvez mettre tout le texte à afficher que vous voulez en HTML !
Rudement pratique quand il y a de grosses quantités de texte à afficher, et aussi 
pour éviter d'avoir à se prendre la tête avec les antislashs devant les guillemets ("ou').
Il vous faudra toutefois penser à refermer l'accolade après (à l'intérieur d'une balise PHP, bien entendu).

Et après ça, ma foi, il n'y a rien de particulier à savoir. Vous allez rencontrer des conditions dans 
la quasi-totalité des cas .
Vous ne devriez pas avoir de problèmes normalement pour utiliser des conditions,
 il n'y a rien de bien difficile. Contentez-vous de reprendre le schéma que je vous ai donné pour la structureif… elseet
  de l'appliquer à votre cas, et vous verrez que les conditions sont souvent indispensables.
  */
?>

<h2>Une alternative pratique : switch</h2>

<p> En théorie, les structures à base deif… elseif… else que je viens de vous montrer suffisent pour traiter n'importe quelle condition.</p>

<div>Pour vous faire comprendre l'intérêt de switch,
 je vais vous donner un exemple un peu lourd avec 
 les if et elseif que vous venez d'apprendre :
</div>

<?php
$note = 16;

if ($note == 0)
{
    echo "Tu es vraiment un gros nul !!!";
}

elseif ($note == 5)
{
    echo "Tu es très mauvais";
}

elseif ($note == 7)
{
    echo "Tu es mauvais";
}

elseif ($note == 10)
{
    echo "Tu as pile poil la moyenne, c'est un peu juste…";
}

elseif ($note == 12)
{
    echo "Tu es assez bon";
}

elseif ($note == 16)
{
    echo "Tu te débrouilles très bien !";
}

elseif ($note == 20)
{
    echo "Excellent travail, c'est parfait !";
}

else
{
    echo "Désolé, je n'ai pas de message à afficher pour cette note";
}
//Comme vous le voyez, c'est lourd, long, et répétitif. Dans ce cas, on peut utiliser une autre structure plus souple : c'est switch.
?>




<p>Voici le même exemple avec switch (le résultat est le même, mais le code est plus adapté) : </p>


<?php
$note = 10;

switch ($note) // on indique sur quelle variable on travaille
{ 
    case 0: // dans le cas où $note vaut 0
        echo "Tu es vraiment un gros nul !!!";
    break;
    
    case 5: // dans le cas où $note vaut 5
        echo "Tu es très mauvais";
    break;
    
    case 7: // dans le cas où $note vaut 7
        echo "Tu es mauvais";
    break;
    
    case 10: // etc. etc.
        echo "Tu as pile poil la moyenne, c'est un peu juste…";
    break;
    
    case 12:
        echo "Tu es assez bon";
    break;
    
    case 16:
        echo "Tu te débrouilles très bien !";
    break;
    
    case 20:
        echo "Excellent travail, c'est parfait !";
    break;
    
    default:
        echo "Désolé, je n'ai pas de message à afficher pour cette note";
}

//Tout d'abord, il y a beaucoup moins d'accolades (elles marquent seulement le début et la fin du switch).


/*
 case signifie « cas ». Dans le switch, on indique au début sur quelle variable on travaille (ici $note).
 On dit à PHP : Je vais analyser la valeur de $note. Après, on utilise des case pour analyser chaque cas 
 (case 0,case 10, etc.). 
 Cela signifie  : Dans le cas où la valeur est 0… Dans le cas où la valeur est 10…
*/


/*
Avantage : on n'a plus besoin de mettre le double égal ! Défaut : ça ne marche pas avec les autres symboles 
(< > <= >= !=). En clair, leswitchne peut tester que l'égalité.
*/


/*
Le mot-clé default à la fin est un peu l'équivalent du else. 
C'est le message qui s'affiche par défaut quelle que soit la valeur de la variable.
*/


/*
Il y a cependant une chose importante à savoir :
 supposons dans notre exemple que la note soit de 10.
  PHP va lire :case 0 ? 
  Non. Je saute.case 5 ? 
  Non plus. Je saute.case 7 ? 
  Non plus. Je saute.case 10 ? Oui, j'exécute les instructions.

 Mais contrairement aux elseif, PHP ne s'arrête pas là et continue à lire les instructions des case qui suivent !case 12,case 16, etc.

Pour empêcher cela, utilisez l'instruction break;. L'instruction break demande à PHP de sortir du switch. Dès que PHP tombe sur break,
 il sort des accolades et donc il ne lit pas les case qui suivent. En pratique, on utilise très souvent un break car sinon, PHP lit
 des instructions qui suivent et qui ne conviennent pas.
Essayez d'enlever les break dans le code précédent, vous allez comprendre pourquoi ils sont indispensables !
*/

?>

<span>Quand doit-on choisirif, et quand doit-on choisirswitch ?</span>


<p>C'est surtout un problème de présentation et de clarté. 
	Pour une condition simple et courte, on utilise leif, 
	et quand on a une série de conditions à analyser, on 
	préfère utiliserswitchpour rendre le code plus clair.
	<p>

<h2>Les ternaires : des conditions condensées</h2>

<div>
Il existe une autre forme de condition, beaucoup moins fréquente,
 mais que je vous présente quand même car vous pourriez un jour ou
  l'autre tomber dessus. Il s'agit de ce qu'on appelle les ternaires.

Un ternaire est une condition condensée qui fait deux choses sur une seule ligne :
on teste la valeur d'une variable dans une condition ;
on affecte une valeur à une variable selon que la condition est vraie ou non.

Prenons cet exemple à base deif… else qui met un booléen $majeur à vrai ou faux 
selon l'âge du visiteur :
</div>
<?php
$age = 24;

if ($age >= 18)
{
	$majeur = true;
}
else
{
	$majeur = false;
}
?>
<span>On peut faire la même chose en une seule ligne grâce à une structure ternaire :</span>
<?php
$age = 24;

$majeur = ($age >= 18) ? true : false;
?>


<div>
Ici, tout notre test précédent a été fait sur une seule ligne !

La condition testée est $age >= 18. Si c'est vrai, alors la valeur indiquée
 après le point d'interrogation (ici true) sera affectée à la variable $majeur. 
 Sinon, c'est la valeur qui suit le symbole « deux-points » qui sera affectée à $majeur.

C'est un peu tordu mais ça marche.
Si vous n'utilisez pas ce type de condition dans vos pages web,
 je ne vous en voudrai pas. 

 Il faut avouer que les ternaires sont un peu difficiles à lire car ils sont très condensés.
  Mais sachez les reconnaître et les comprendre si vous en rencontrez un jour en lisant le code source de quelqu'un d'autre.
</div>


<footer>
<h4>En résumé</h4>
<div>
Les conditions permettent à PHP de prendre des décisions en fonction de la valeur des variables.

La forme de condition la plus courante estif…elseif…elsequi signifie « si »… « sinon si »… « sinon ».

On peut combiner des conditions avec les mots-clés AND(« et ») etOR(« ou »).

Si une condition comporte de nombreuxelseif, il peut être plus pratique d'utiliserswitch, une autre forme de condition.

Les ternaires sont des conditions condensées qui font un test sur une variable, et en fonction des résultats de ce test

 donnent une valeur à une autre variable. Elles sont cependant plus rarement utilisées.


</div>

<p><em>Source: <a href="https://openclassrooms.com/fr/courses/918836-concevez-votre-site-web-avec-php-et-mysql/912046-les-conditions">Source des info  </a></em></p>


</footer>
    </body>
</html>
